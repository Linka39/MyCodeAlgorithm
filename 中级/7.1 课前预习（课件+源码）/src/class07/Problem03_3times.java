package class07;

/**
 * 小 Q得到一个神奇的数列: 1, 12, 123,...12345678910,1234567891011...。 并且小Q对于能否被3整除这个性质很感兴趣。
 * 小Q现在希望你能帮他计算一下从数列的第l个到第r个(包含端点)有多少个数可以被3整除。
 *
 * 输入描述： 输入包括两个整数l和r(1 <= l <= r <= 1e9), 表示要求解的区间两端。
 * 输出描述： 输出一个整数, 表示区间内能被3整除的数字个数。
 *
 * 示例1:
 * 输入 2 5  （12，123，1234，12345）
 * 输出 3
 *
 */
public class Problem03_3times {

	// 思路：自然数累加公式：Sn = n * (n + 1) / 2，如果该数能被3整除，则数目+1
	public static int getNum(int l, int r) {
		int sum = 0;
		for (int i = l; i <= r; i++) {
			long tmp = (long) (i + 1) * (long) i / 2L;
			if (tmp % 3 == 0) {
				sum++;
			}
		}
		return sum;
	}

}
